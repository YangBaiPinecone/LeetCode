// http://www.cnblogs.com/grandyang/p/4402656.html

class Solution {
public:
    void dfs(vector<vector<char>>& grid, vector<vector<bool>>& visited, int x, int y)
    {
        if(grid[x][y]=='0' || visited[x][y])
            return;
        visited[x][y]=true;
        if(x-1>=0 && !visited[x-1][y])
        {
            dfs(grid,visited,x-1,y);
        }
        if(x+1<=grid.size()-1 && !visited[x+1][y])
        {
            dfs(grid,visited,x+1,y);
        }
        if(y-1>=0 && !visited[x][y-1])
        {
            dfs(grid,visited,x,y-1);
        }
        if(y+1<=grid[0].size()-1 && !visited[x][y+1])
        {
            dfs(grid,visited,x,y+1);
        }
        return;
    }
    int numIslands(vector<vector<char>>& grid) {
        int res=0;
        if(grid.size()==0 || grid[0].size()==0)
            return res;
        int row=grid.size();
        int col=grid[0].size();
        vector<vector<bool>> visited(row,vector<bool>(col,false));
        for(int r=0;r<row;++r)
        {
            for(int c=0;c<col;++c)
            {
                if(!visited[r][c] && grid[r][c]=='1')
                {
                    ++res;
                    dfs(grid,visited,r,c);
                }
            }
        }
        return res;
    }
};
