// https://blog.csdn.net/violet_echo_0908/article/details/78923003

class Solution {
public:
    int partition(vector<int>& nums, int left, int right)
    {
        int pivot = nums[left];
        int l=left+1;
        int r=right;
        while(l<=r)
        {
            if(nums[l]<pivot && pivot<nums[r])
            {
                int tmp=nums[l];
                nums[l]=nums[r];
                nums[r]=tmp;
                ++l;
                --r;
            }
            else if(nums[l]>=pivot)
            {
                ++l;
            }
            else if(nums[r]<=pivot)
            {
                --r;
            }
        }
        int tmp=nums[left];
        nums[left]=nums[r];
        nums[r]=tmp;
        return r;
    }
    int findKthLargest(vector<int>& nums, int k) {
        int left=0;
        int right=nums.size()-1;
        while(true)
        {
            int pos=partition(nums,left,right);
            if(pos==k-1)
                return nums[pos];
            else if(pos>k-1)
                right=pos-1;
            else if(pos<k+1)
                left=pos+1;
        }
    }
};

