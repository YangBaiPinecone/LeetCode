// http://www.cnblogs.com/grandyang/p/4270008.html

class Solution {
public:
    bool isPalindrome(string s, int start, int end)
    {
        while(start<end)
        {
            if(s[start]!=s[end])
            {
                return false;
            }
            ++start;
            --end;
        }
        return true;
    }
    void DFS(string s, int start, vector<string>& candidate, vector<vector<string>>& res)
    {
        if(start==s.size())
        {
            res.push_back(candidate);
            return;
        }
        for(int i=start; i<s.size();++i)
        {
            if(isPalindrome(s,start,i))
            {
                candidate.push_back(s.substr(start, i-start+1));
                DFS(s,i+1,candidate,res);
                candidate.pop_back();
            }
        }
        return;
    }
    vector<vector<string>> partition(string s) {
        vector<vector<string>> res;
        vector<string> candidate;
        DFS(s, 0, candidate, res);
        return res;
    }
};
