// hash set
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    bool hasCycle(ListNode *head) {
        unordered_set<ListNode *> myset;
        if(head==NULL)
            return false;
        while(head!=NULL)
        {
            if(myset.count(head))
            {
                return true;
            }
            else
            {
                myset.insert(head);
            }
            head=head->next;
        }
        return false;
    }
};

// slow and fast pointer
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    bool hasCycle(ListNode *head) {
        if(head==NULL || head->next==NULL)
        {
            return false;
        }
        ListNode* slow=head;
        ListNode* fast=head->next;
        while(slow!=fast)
        {
            if(fast==NULL || fast->next==NULL)
            {
                return false;
            }
            slow=slow->next;
            fast=fast->next->next;
        }
        return true;
    }
};

//142. Linked List Cycle II
// 直接套用上一题unordered_set方法
// method2: slow fast pointer
// https://leetcode.com/problems/linked-list-cycle-ii/discuss/44781/Concise-O(n)-solution-by-using-C%2B%2B-with-Detailed-Alogrithm-Description

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode *detectCycle(ListNode *head) {
        unordered_set<ListNode*> myset;
        if(head==NULL)
            return NULL;
        while(head!=NULL)
        {
            if(myset.count(head))
            {
                return head;
            }
            else
            {
                myset.insert(head);
            }
            head=head->next;
        }
        return NULL;
    }
};

