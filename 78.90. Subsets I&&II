// https://blog.csdn.net/camellhf/article/details/73551410

class Solution {
public:
    void dfs(vector<vector<int>>& res, vector<int> nums,  vector<int> temp, int i)
    {
        if(i==nums.size())
        {
            res.push_back(temp);
            return;
        }
        // don't add nums[i]
        dfs(res,nums,temp,i+1);
        temp.push_back(nums[i]);
        // add nums[i]
        dfs(res,nums,temp,i+1);
    }
    vector<vector<int>> subsets(vector<int>& nums) {
        vector<vector<int>> res;
        vector<int> temp;
        dfs(res,nums,temp,0);
        return res;
    }
};


// 90. Subsets II
// https://blog.csdn.net/fuxuemingzhu/article/details/79785548

class Solution {
public:
    void helper(vector<int>& nums, vector<vector<int>>& res, vector<int> path, int start)
    {
        if(start>nums.size())
            return;
        res.push_back(path);
        for(int i=start; i<nums.size(); ++i)
        {
            if(i>start && nums[i]==nums[i-1])
                continue;
            path.push_back(nums[i]);
            helper(nums,res,path,i+1);
            path.pop_back();
        }
    }    
    vector<vector<int>> subsetsWithDup(vector<int>& nums) {
        vector<vector<int>> res;
        if(nums.size()==0)
            return res;
        sort(nums.begin(),nums.end());
        helper(nums,res,{},0);
        return res;
    }
};
