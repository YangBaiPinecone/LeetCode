// https://blog.csdn.net/liyuefeilong/article/details/50075405


class Solution {
public:
    void dfs(int k, int n, int level, vector<int>& candidate, vector<vector<int>>& res) 
    {
        if(n<0)
            return;
        if(n==0 && candidate.size()==k)
        {
            res.push_back(candidate);
            return;
        }
        for(int i=level;i<=9;++i)
        {
            candidate.push_back(i);
            dfs(k,n-i,i+1,candidate, res);
            candidate.pop_back();   //千万不要忘记pop
        }
        return;
    }
    vector<vector<int>> combinationSum3(int k, int n) {
        vector<vector<int>> res;
        vector<int> candidate;
        if(k==0 || n==0)
            return res;
        if(k>n)
            return res;
        dfs(k, n, 1, candidate, res);
        return res;
    }
};
