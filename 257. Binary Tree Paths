//注意各种边界条件

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    void dfs(TreeNode* root, vector<string>& res, string candidate)
    {
        if(root->left==NULL && root->right==NULL)   // 到达叶子节点
        {
            candidate+=to_string(root->val);
            res.push_back(candidate);
            return;
        }
        candidate+=to_string(root->val);
        candidate+="->";
        if(root->left!=NULL)
            dfs(root->left, res, candidate);
        if(root->right!=NULL)
            dfs(root->right, res, candidate);
        return;        
    }
    vector<string> binaryTreePaths(TreeNode* root) {
        vector<string> res;
        if(root==NULL)
            return res;
        dfs(root, res, "");
        return res;
    }
};
