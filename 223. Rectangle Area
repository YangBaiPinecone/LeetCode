// method1
class Solution {
public:
    int computeArea(int A, int B, int C, int D, int E, int F, int G, int H) {
        int area1 = (C-A)*(D-B);
        int area2 = (G-E)*(H-F);           
        if(A>=G||E>=C||B>=H||F>=D)return area1+area2;
        int area3 = (min(G,C) - max(A,E)) * (min(D,H) - max(B,F));
        return area1 + (area2-area3);
    }
};

// method2
class Solution {
public:
    long long intersection(int A, int B, int C, int D, int E, int F, int G, int H)
    {
        long long delta_x = static_cast<long long>(min(C, G)) - max(A, E);
        long long delta_y = static_cast<long long>(min(D, H)) - max(B, F);
        if(delta_x <=0 || delta_y<=0)
            return 0;
        else
            return delta_x * delta_y;
    }
    int computeArea(int A, int B, int C, int D, int E, int F, int G, int H) {
        int area1 = (C-A)*(D-B);
        int area2 = (G-E)*(H-F);
        long long inter = intersection(A, B, C, D, E, F, G, H);
        return static_cast<long long>(area1)+area2-inter;
    }
};
